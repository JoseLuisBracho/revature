package com.app.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.app.dao.PlayerSearchDAO;
import com.app.dao.dbutil.PostgresqlConnection;
import com.app.exception.BusinessException;
import com.app.model.Player;

public class PlayerSearchDAOImpl implements PlayerSearchDAO {

	@Override
	public Player getPlayerById(int playerid) throws BusinessException {
		// TODO Auto-generated method stub
		Player player = null;
		try {
			Connection connection = PostgresqlConnection.getConnection();
			String sql = "select playername, teamid, age, position, dob, contact from \"Test\".player where playerid = ?";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, playerid);
			ResultSet resultSet = preparedStatement.executeQuery();
			
			if(resultSet.next()) {
				player = new Player();
				player.setPlayerid(playerid);
				player.setPlayername(resultSet.getString("playername"));
				player.setTeamid(resultSet.getInt("teamid"));
				player.setAge(resultSet.getInt("age"));
				player.setPosition(resultSet.getString("position"));
				player.setDob(resultSet.getDate("dob"));
				player.setContact(resultSet.getLong("contact"));

			} else {
				throw new BusinessException("Player with id " + playerid + " not found");
			}

			
		} catch (ClassNotFoundException | SQLException e) {
			throw new BusinessException("Internal Error Ocurred");
		}
		return player;
	}

	@Override
	public Player getPlayerByContact(long contact) throws BusinessException {
		// TODO Auto-generated method stub
		Player player = null;
		try {
			Connection connection = PostgresqlConnection.getConnection();
			String sql = "select playerid, playername, teamid, age, position, dob, contact from \"Test\".player where contact = ?";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setLong(1, contact);
			ResultSet resultSet = preparedStatement.executeQuery();
			
			if(resultSet.next()) {
				player = new Player();
				player.setPlayerid(resultSet.getInt("playerid"));
				player.setPlayername(resultSet.getString("playername"));
				player.setTeamid(resultSet.getInt("teamid"));
				player.setAge(resultSet.getInt("age"));
				player.setPosition(resultSet.getString("position"));
				player.setDob(resultSet.getDate("dob"));
				player.setContact(resultSet.getLong("contact"));

			} else {
				throw new BusinessException("Player with Contact Number " + contact + " not found");
			}

			
		} catch (ClassNotFoundException | SQLException e) {
			throw new BusinessException("Internal Error Ocurred");
		}
		return player;
	}

	@Override
	public List<Player> getPlayersByAge(int age) throws BusinessException {
		// TODO Auto-generated method stub
		List<Player> playersByAge = new ArrayList<>();
		try {
			Connection connection = PostgresqlConnection.getConnection();
			String sql = "select playerid, playername, teamid, age, position, dob, contact from \"Test\".player where age = ?";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setInt(1, age);
			ResultSet resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				Player player = new Player();
				player.setPlayerid(resultSet.getInt("playerid"));
				player.setPlayername(resultSet.getString("playername"));
				player.setTeamid(resultSet.getInt("teamid"));
				player.setAge(resultSet.getInt("age"));
				player.setPosition(resultSet.getString("contact"));
				player.setDob(resultSet.getDate("dob"));
				player.setContact(resultSet.getLong("contact"));
				
				playersByAge.add(player);
			}
			if(playersByAge.size()==0) {
				throw new BusinessException("No player found with age: " + age);
			}
		} catch (ClassNotFoundException | SQLException e) {
			throw new BusinessException("Internal Error Ocurred");
		}
		
		return playersByAge;
	}

	@Override
	public List<Player> getPlayersByPosition(String position) throws BusinessException {
		// TODO Auto-generated method stub
		List<Player> playersByPosition = new ArrayList<>();
		try {
			Connection connection = PostgresqlConnection.getConnection();
			String sql = "select playerid, playername, teamid, age, position, dob, contact from \"Test\".player where position = ?";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, position);
			ResultSet resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				Player player = new Player();
				player.setPlayerid(resultSet.getInt("playerid"));
				player.setPlayername(resultSet.getString("playername"));
				player.setTeamid(resultSet.getInt("teamid"));
				player.setAge(resultSet.getInt("age"));
				player.setPosition(resultSet.getString("position"));
				player.setDob(resultSet.getDate("dob"));
				player.setContact(resultSet.getLong("contact"));
				
				playersByPosition.add(player);
			}
			if(playersByPosition.size()==0) {
				throw new BusinessException("No player found playing poition: " + position);
			}
		} catch (ClassNotFoundException | SQLException e) {
			throw new BusinessException("Internal Error Ocurred");
		}
		
		return playersByPosition;
	}

	@Override
	public List<Player> getPlayersByTeamName(String teamname) throws BusinessException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Player> getPlayersByName(String playername) throws BusinessException {
		// TODO Auto-generated method stub
		List<Player> playersByName = new ArrayList<>();
		try {
			Connection connection = PostgresqlConnection.getConnection();
			String sql = "select playerid, playername, teamid, age, position, dob, contact from \"Test\".player where playername = ?";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setString(1, playername);
			ResultSet resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				Player player = new Player();
				player.setPlayerid(resultSet.getInt("playerid"));
				player.setPlayername(resultSet.getString("playername"));
				player.setTeamid(resultSet.getInt("teamid"));
				player.setAge(resultSet.getInt("age"));
				player.setPosition(resultSet.getString("position"));
				player.setDob(resultSet.getDate("dob"));
				player.setContact(resultSet.getLong("contact"));
				
				playersByName.add(player);
			}
			if(playersByName.size()==0) {
				throw new BusinessException("No player found with the name: " + playername);
			}
		} catch (ClassNotFoundException | SQLException e) {
			throw new BusinessException("Internal Error Ocurred");
		}
		
		return playersByName;
	}

	@Override
	public List<Player> getPlayersByDob(String dob) throws BusinessException, ParseException {
		// TODO Auto-generated method stub
		List<Player> playersByDob = new ArrayList<>();
		DateFormat format = new SimpleDateFormat("MM/dd/yyyy");
		try {
			Connection connection = PostgresqlConnection.getConnection();
			String sql = "select playerid, playername, teamid, age, position, dob, contact from \"Test\".player where dob = ?";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);
			preparedStatement.setDate(1, new java.sql.Date(format.parse(dob).getTime()));
			ResultSet resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				Player player = new Player();
				player.setPlayerid(resultSet.getInt("playerid"));
				player.setPlayername(resultSet.getString("playername"));
				player.setTeamid(resultSet.getInt("teamid"));
				player.setAge(resultSet.getInt("age"));
				player.setPosition(resultSet.getString("position"));
				player.setDob(resultSet.getDate("dob"));
				player.setContact(resultSet.getLong("contact"));
				
				playersByDob.add(player);
			}
			if(playersByDob.size()==0) {
				throw new BusinessException("No player found with the Birthday: " + dob);
			}
		} catch (ClassNotFoundException | SQLException e) {
			throw new BusinessException("Internal Error Ocurred");
		}
		
		return playersByDob;
	}

	@Override
	public List<Player> getAllPlayers() throws BusinessException {
		// TODO Auto-generated method stub
		List<Player> playersList = new ArrayList<>();
		
		try {
			Connection connection = PostgresqlConnection.getConnection();
			String sql = "select playerid, playername, teamid, age, position, dob, contact from \"Test\".player";
			PreparedStatement preparedStatement = connection.prepareStatement(sql);

			ResultSet resultSet = preparedStatement.executeQuery();

			while(resultSet.next()) {
				Player player = new Player();
				player.setPlayerid(resultSet.getInt("playerid"));;
				player.setPlayername(resultSet.getString("playername"));
				player.setTeamid(resultSet.getInt("teamid"));
				player.setAge(resultSet.getInt("age"));
				player.setPosition(resultSet.getString("position"));
				player.setDob(resultSet.getDate("dob"));
				player.setContact(resultSet.getLong("contact"));
				
				playersList.add(player);
			}
			
			if(playersList.size()==0) {
				throw new BusinessException("No players in DB... so far");
			}
		
		} catch (ClassNotFoundException | SQLException e) {
			throw new BusinessException("Internal Error Ocurred");
		}
		return playersList;
	}
	

}
